[
  {
    "name": "Nearest Neighbor",
    "value": "nearest_neighbor",
    "import_path": "verypy.classic_heuristics.nearest_neighbor",
    "function_name": "nearest_neighbor_init",
    "parameters": ["D", "d", "C", "L", "emerging_route_count"]
  },
  {
    "name": "Parallel Savings",
    "value": "parallel_savings",
    "import_path": "verypy.classic_heuristics.parallel_savings",
    "function_name": "parallel_savings_init",
    "parameters": ["D", "d", "C", "L"]
  },
  {
    "name": "Sequential Savings",
    "value": "sequential_savings",
    "import_path": "verypy.classic_heuristics.sequential_savings",
    "function_name": "sequential_savings_init",
    "parameters": ["D", "d", "C", "L", "lambda_multiplier"]
  },
  {
    "name": "Paessens Savings",
    "value": "paessens_savings",
    "import_path": "verypy.classic_heuristics.paessens_savings",
    "function_name": "paessens_savings_init",
    "parameters": ["D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "Gillet-Miller Sweep",
    "value": "gillet_miller_sweep",
    "import_path": "verypy.classic_heuristics.gillet_miller_sweep",
    "function_name": "gillet_miller_init",
    "parameters": ["points", "D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "Wren-Holliday Sweep",
    "value": "wren_holliday_sweep",
    "import_path": "verypy.classic_heuristics.wren_holliday_sweep",
    "function_name": "wren_holliday_init",
    "parameters": ["points", "D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "Route-First Cluster-Second",
    "value": "route_first_cluster_second",
    "import_path": "verypy.classic_heuristics.rfcs",
    "function_name": "route_first_cluster_second_init",
    "parameters": ["D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "Petal VRP",
    "value": "petal_vrp",
    "import_path": "verypy.classic_heuristics.petalvrp",
    "function_name": "petal_init",
    "parameters": ["points", "D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "Matching VRP",
    "value": "matching_vrp",
    "import_path": "verypy.classic_heuristics.matchingvrp",
    "function_name": "mbsa_init",
    "parameters": ["D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "CMT Two-Phase",
    "value": "cmt_two_phase",
    "import_path": "verypy.classic_heuristics.cmt_2phase",
    "function_name": "cmt_2phase_init",
    "parameters": ["D", "d", "C", "L", "minimize_K"]
  },
  {
    "name": "Tyagi Nearest Neighbor",
    "value": "tyagi_nearest_neighbor",
    "import_path": "verypy.classic_heuristics.tyagi_nearest_neighbor",
    "function_name": "tyagi_init",
    "parameters": ["D", "d", "C", "L"]
  },
  {
    "name": "GAP VRP",
    "value": "gap_vrp",
    "import_path": "verypy.classic_heuristics.gapvrp",
    "function_name": "gap_init",
    "parameters": [
      "points",
      "D",
      "d",
      "C",
      "L",
      "st",
      "K",
      "minimize_K",
      "find_optimal_seeds",
      "seed_method",
      "seed_edge_weight_type",
      "use_adaptive_L_constraint_weights",
      "increase_K_on_failure"
    ]
  },
  {
    "name": "LR3OPT",
    "value": "lr3opt",
    "import_path": "verypy.classic_heuristics.lr3opt",
    "function_name": "lr3opt_init",
    "parameters": [
      "D",
      "d",
      "C",
      "L",
      "initial_lambda1_C",
      "initial_lambda1_L",
      "initialization_algorithm",
      "postoptimize_with_3optstar",
      "max_concecutive_lamba_incs"
    ]
  }
]
